{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getBooksQeury","gql","getAuthorsQeury","addBookMutation","getBookQeury","BookDetails","props","useLazyQuery","getBook","data","useEffect","variables","id","result","book","name","genre","author","className","books","map","item","displayBookDetails","BookList","useState","selected","setSelected","useQuery","loading","error","results","onClick","e","AddBook","setName","setGenre","authorId","setAuthorId","disabled","authors","value","DispatchAuthors","useMutation","createPost","onSubmit","event","preventDefault","refetchQueries","query","onChange","target","type","client","ApolloClient","uri","cache","InMemoryCache","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4909a0e.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\n\nconst getBooksQeury = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n`;\n\nconst getAuthorsQeury = gql`\n  {\n    authors {\n      name\n      id\n    }\n  }\n`;\n\nconst addBookMutation = gql`\n  mutation AddBook($name : String!, $genre: String!, $authorId: ID!){\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\n      id\n      name\n    }\n  }\n`\nconst getBookQeury = gql `\n  query($id: ID){\n    book(id: $id){\n      id\n      name\n      genre\n      author{\n        id\n        name\n        age\n        books{\n          name\n          id\n        }\n      }\n    }\n  }\n`\n\nexport {getAuthorsQeury , getBooksQeury, addBookMutation, getBookQeury}","import React, { useEffect } from \"react\";\nimport {  useLazyQuery } from \"@apollo/client\";\nimport { getBookQeury } from \"../queries/queries\";\n\nfunction BookDetails(props) {\n  const [getBook, {  data }] = useLazyQuery(getBookQeury);\n  useEffect(() => {\n    if (props.data) {\n      getBook({\n        variables: { id: props.data }\n      });\n    }\n  }, [props.data,getBook]);\n\n  const displayBookDetails = () => {\n    if (data) {\n      const book = data.book;\n      return (\n        <div>\n          <h2>{book.name}</h2>\n          <p>{book.genre}</p>\n          <p>{book.author.name}</p>\n          <p>All books by this author:</p>\n          <ul className=\"other-books\">\n            {book.author.books.map((item) => {\n              return <li key={item.id}>{item.name}</li>;\n            })}\n          </ul>\n        </div>\n      );\n    } else {\n      return <div>No book selected</div>;\n    }\n  };\n  const result = displayBookDetails();\n  return (\n    <div id=\"book-details\">\n      {result}\n    </div>\n  );\n}\n\nexport default BookDetails;\n","import React, {useState} from \"react\";\nimport {useQuery } from \"@apollo/client\";\nimport {getBooksQeury} from \"../queries/queries\"\nimport BookDetails from \"./BookDetails\";\n\n\n\nfunction BookList(props) {\n  const [selected, setSelected] = useState(null)\n  const { loading, error, data } = useQuery(getBooksQeury);\n\n  function dispatchBooks() {\n    if (loading) {\n      return <p>Loading books...</p>;\n    } else if (error) {\n      return <p>Error :(</p>;\n    } else {\n      const bookdata = data.books;\n      return bookdata.map((book) => {\n        return <li key={book.id} onClick={(e)=>{setSelected(book.id)}}>{book.name}</li>;\n      });\n    }\n  }\n  const results = dispatchBooks();\n  return (\n    <div>\n      <ul id=\"book-list\">{results}</ul>\n      <BookDetails data={selected}/>\n    </div>\n  );\n}\n\nexport default BookList;\n","import React , {useState}from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport {getAuthorsQeury, addBookMutation,getBooksQeury} from \"../queries/queries\"\n\nfunction AddBook(props) {\n    const [name, setName] = useState('')\n    const [genre, setGenre] = useState('')\n    const [authorId, setAuthorId] = useState('')\n\n    const handleName = (event)=>{\n        setName(event.target.value)\n\n    }\n    const handleGenre = (event)=>{\n        setGenre(event.target.value)\n\n    }\n    const handleAuthorId = (event)=>{\n        setAuthorId(event.target.value)\n    }\n\n\n    function DispatchAuthors() {\n        const { loading, error, data } = useQuery(getAuthorsQeury);\n\n        if (loading) {\n          return <option disabled>Loading Authors..</option>;\n        } else if (error) {\n          return <p>Error :(</p>;\n        } else {\n          const bookdata = data.authors;\n          return bookdata.map((author) => {\n            return <option key={author.id} value={author.id}>{author.name}</option>\n          });\n        }\n      }\n      const results = DispatchAuthors();\n\n      const [createPost, { loading}] = useMutation(addBookMutation);\n\n    const submitForm = (event)=>{\n        event.preventDefault();\n        createPost({variables:{name : name, genre: genre, authorId: authorId},\n            refetchQueries: [{ query: getBooksQeury }]\n        })\n    }\n\n  return (\n    <form id=\"add-book\" onSubmit={submitForm}>     \n      <div className=\"field\">\n        <label>Book name:</label>\n        <input onChange={handleName}></input>\n      </div>\n      <div className=\"field\">\n        <label>Genre:</label>\n        <input onChange={handleGenre}></input>\n      </div>\n      <div className=\"field\">          \n        <label>Author:</label>\n        <select onChange={handleAuthorId}>\n          <option>Select author</option>\n          {results}\n        </select>\n      </div>\n      <button type=\"submit\">+</button>\n    </form>\n  );\n}\n\nexport default AddBook;\n","import React from 'react'\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport {ApolloProvider} from '@apollo/client';\n\n// components\nimport BookList from \"./components/BookList\"\nimport AddBook from \"./components/AddBook\"\n\n// Apollo client setup\nconst client = new ApolloClient({\n  uri:'https://graph-ql-reading-server.vercel.app/graphql',\n  cache: new InMemoryCache()\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div id=\"main\">\n        <h1>Reading List</h1>\n        <BookList/>\n        <AddBook/>\n    </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}